[{"/Users/yanghyerim/Documents/git/dog-api/src/index.js":"1","/Users/yanghyerim/Documents/git/dog-api/src/App.js":"2","/Users/yanghyerim/Documents/git/dog-api/src/stores/DogStore.js":"3","/Users/yanghyerim/Documents/git/dog-api/src/components/DogImage.js":"4","/Users/yanghyerim/Documents/git/dog-api/src/components/DogSelect.js":"5","/Users/yanghyerim/Documents/git/dog-api/src/util/breeds.js":"6"},{"size":342,"mtime":1621363932000,"results":"7","hashOfConfig":"8"},{"size":258,"mtime":1621363932000,"results":"9","hashOfConfig":"8"},{"size":338,"mtime":1621363932000,"results":"10","hashOfConfig":"8"},{"size":1088,"mtime":1621363932000,"results":"11","hashOfConfig":"8"},{"size":1133,"mtime":1621363932000,"results":"12","hashOfConfig":"8"},{"size":657,"mtime":1621363932000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qvgsum",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yanghyerim/Documents/git/dog-api/src/index.js",[],"/Users/yanghyerim/Documents/git/dog-api/src/App.js",[],"/Users/yanghyerim/Documents/git/dog-api/src/stores/DogStore.js",[],"/Users/yanghyerim/Documents/git/dog-api/src/components/DogImage.js",["28"],"import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport \"../styles/DogImage.css\"\n\n@inject('dogStore')\n@observer\nclass DogImage extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      gotImage : false,\n      src : \"\"\n    }\n  }\n\n  // res : state 갱신, err : console 출력\n  handleClick = () => {\n    const { dogStore } = this.props\n    dogStore.getImage().then(res => {\n      this.setState({\n        gotImage: true,\n        src: res.data.message\n      })\n    }).catch(err => {\n      console.error(err)\n    })\n  }\n\n  render(){\n    const { gotImage, src } = this.state\n    const { dogStore } = this.props\n\n    return <div className=\"album\">\n      {/* API */}\n      <div className=\"album__api\">\n        <p>\n          I'm <span className=\"album__api__breed\">{dogStore.dog}</span>\n          <button onClick={this.handleClick}>FETCH</button>\n        </p>\n      </div>\n\n      {/* Image */}\n      <div className=\"album__image\">\n        {gotImage && <img src={src} alt=\"Dog Image\" />}\n      </div>\n    </div>\n  }\n}\n\nexport default DogImage;","/Users/yanghyerim/Documents/git/dog-api/src/components/DogSelect.js",["29"],"import React from 'react';\nimport { breeds } from '../util/breeds';\nimport { inject, observer } from 'mobx-react';\nimport { DogStore } from '../stores/DogStore'\nimport \"../styles/DogSelect.css\"\n\n@inject('dogStore')\n@observer\nclass DogSelect extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = { currentText: \"\" }\n  }\n\n  handleChange = event => {\n    this.setState({ currentText: event.target.value })\n  }\n\n  render(){\n    const { dogStore } = this.props\n\n    return <div className=\"select__wrap\">\n      <input \n      className=\"input__breed\"\n      type=\"text\"\n      placeholder=\"SEARCH\"\n      onChange={e => this.handleChange(e)}\n      />\n\n      <ul>\n        {breeds.map((breed, index) => {\n          // breed.includes() : 인자 안에있는 문자가 포함되는지 아닌지 여부를 나타내주는 메소드\n          return breed.includes(this.state.currentText) &&\n          <li \n          className=\"breeds__breed\" \n          onClick={() => dogStore.setDog(breed)} \n          key={index}>\n            {breed}\n          </li>\n        })}\n      </ul>\n    </div>\n  }\n\n}\n\nexport default DogSelect;\n","/Users/yanghyerim/Documents/git/dog-api/src/util/breeds.js",[],{"ruleId":"30","severity":1,"message":"31","line":44,"column":22,"nodeType":"32","endLine":44,"endColumn":55},{"ruleId":"33","severity":1,"message":"34","line":4,"column":10,"nodeType":"35","messageId":"36","endLine":4,"endColumn":18},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-unused-vars","'DogStore' is defined but never used.","Identifier","unusedVar"]